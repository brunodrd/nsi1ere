{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exercices - Encodage de texte\n",
    "========================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Extrait et adapté des exercices du livre cité en fin de page. Le niveau de difficulté est indiqué éventuellement par des étoiles*.  \n",
    "\n",
    "*Prendre connaissance du complément (non exigible à l'examen) ci-dessous*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "**Complément: formattage des chaînes en python** (*hors programme, mais très utile*)    \n",
    "\n",
    "Python permet de *formatter* de façon fine et simple les chaînes de caractères. On utilise pour cela les `f-strings`.  \n",
    "*La syntaxe*:  \n",
    "La chaîne de caratères est comprise entre les caractères `f\"` et `\"`. Si une variable doit être insérée dans cette chaîne de caratère, on l'entoure d'accolades `{}`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J'ai 16 ans\n"
     ]
    }
   ],
   "source": [
    "# Exemple\n",
    "age = 16\n",
    "reponse = f\"J'ai {age} ans\"\n",
    "print(reponse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Le formattage*  \n",
    "On peut forcer le format d'écriture d'une variable intervenant dans une chaîne de caractères. Par exemple, on peut souhaiter une écriture en binaire d'une variable de type entier. On rajoute alors **après le nom de la variable, entre accolades** la suite `:b`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "code ascii de A: 1000001\n"
     ]
    }
   ],
   "source": [
    "code_ascii_A = 65\n",
    "A_bin = f\"code ascii de A: {code_ascii_A:b}\"\n",
    "print(A_bin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut aussi fixer le nombre de caractères utilisés pour écrire le nombre. Par exemple, pour écrire le nombre binaire précédent sur 8 caractères (*1 octet*), en complétant éventuellement avec des zéros à gauche, on rajoute `:08b` après le nom de la variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "code ascii de A: 01000001\n"
     ]
    }
   ],
   "source": [
    "# Ecriture de code_ascii_A sur 8 bits ou 1 octet\n",
    "A_bin = f\"code ascii de A: {code_ascii_A:08b}\"\n",
    "print(A_bin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "code ascii de A: 0000000001000001\n"
     ]
    }
   ],
   "source": [
    "# Le même nombre, en binaire sur 16 bits ou 2 octets\n",
    "A_bin = f\"code ascii de A: {code_ascii_A:016b}\"\n",
    "print(A_bin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercice 223**  \n",
    "Donner le codage ASCII des deux chaînes de caractères Python ci-dessous.  \n",
    "\n",
    "```python\n",
    "'bonjour tout le monde!'\n",
    "```\n",
    "```python\n",
    "\"\"\"programmer en \n",
    "Python\"\"\"\n",
    "```\n",
    "\n",
    "**Exercice 224**  \n",
    "Écrire une fonction `printASCII(s)` qui renvoie les codes ASCII au format hexadécimal d'une chaîne de caractères. Utiliser cette fonction pour vérifier les réponses à l'**exercice 223**. \n",
    " \n",
    "**Exercice 225**`**`  \n",
    "L'algorithme *rot 13* est un algorithme très simple de chiffrement qui consiste à décaler de 13 caractères chaque lettre d'un texte. Par exemple, le mot *python* est transformé en *clguba*. Écrire en Python une fonction `rot13(s)` en supposant que la chaîne passée en argument ne contient que des caractères entre a et z (en minuscule) et éventuellement des espaces (uniquement le caractère `' '`). Votre fonction ne doit décaler que les lettres de l'alphabet (*elle ne touche donc pas aux espaces*). Elle renvoie en sortie une chaîne de caractères.  \n",
    "\n",
    "**Exercice 226**`*`  \n",
    "Coder une fonction `printUTF8(s)` qui prend une chaîne `s` en paramètre et qui renvoie le point de code de chaque caractère de `s` en décimal et les octets en binaire de l'encodage de `s` en UTF-8. Tester votre fonction sur le mot `élégance`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercice 228**`*`  \n",
    "Coder une fonction `octets_utf8(c)` qui prend un caractère `c` en paramètre. Cette fonction va **encoder** `c` **en UTF-8** et renvoyer les octets du résultat en décimal et en hexadécimal. Tester votre fonction sur les trois caractères ci-dessous:  \n",
    "\n",
    "* caractère `A` (point de code 65);\n",
    "* caractère `è` (point de code 232);\n",
    "* caractère `⋆` (*STAR OPERATOR*, point de code 8902); \n",
    "\n",
    "**Exercice 229**`*`  \n",
    "Ecrire une fonction `est_utf8_valide(n1, n2, n3)` qui renvoie `True` si la suite d'octets (*représentée en base 10*) `n1`, `n2`, `n3` représente une séquence valide UTF-8. Elle renvoie `False` sinon.  \n",
    "Tester votre fonction sur les séquences ci-dessous.    \n",
    "\n",
    "* 126 64 100\n",
    "* 198 129 129\n",
    "* 227 180 140  \n",
    "\n",
    "**Exercice 230**`***`  \n",
    "Écrire une fonction Python `longueur(ch)` qui parcours la chaîne d'octets `ch`, supposée représenter une chaîne encodée en UTF-8 et qui compte le nombre de caractères (*il est interdit de convertir* `ch` *en chaîne puis de calculer la longueur de cette dernière*).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "**Références**  \n",
    "Spécialité NSI 1re - Balabonski et al. ellipses  \n",
    "[lien vers la description](https://www.editions-ellipses.fr/accueil/118-10382-specialite-numerique-et-sciences-informatiques-30-lecons-avec-exercices-corriges-premiere-nouveaux-programmes-9782340033641.html#/1-format_disponible-broche)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
