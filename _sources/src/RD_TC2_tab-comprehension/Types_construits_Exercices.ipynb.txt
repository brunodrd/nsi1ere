{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Types construits - Exercices\n",
    "======================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extrémum dans un tableau"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ecrire une fonction `maximum(t)` qui renvoie la valeur maximale présente dans le tableau `t`. **L'itération sur les indices est interdite**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tableau défini en compréhension"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Que construit l'expression ci-dessous?  \n",
    "\n",
    "```python\n",
    "t = [i % 3 for i in range(100)]\n",
    "```\n",
    "\n",
    "2. On défini une fonction $f$ telle que:  \n",
    "\n",
    "```python\n",
    "def f(t):\n",
    "    \"\"\"\n",
    "    renvoie ...?\n",
    "    \"\"\"\n",
    "    return [n for n in t if n > 0]\n",
    "```\n",
    "Etant donné `x = [-5, 2, 3, -7, 42, 7]`. Que vaut `f(x)`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Utilisation des tableaux en compréhension"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On souhaite écrire un programme donnant le graphe d'une fonction $f$ sur un intervalle donné.  \n",
    "\n",
    "![graphe](img/graphe_f.png)\n",
    "\n",
    "On définit d'abord la fonction $f$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    return x ** 2 + x - 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Que réalise l'instruction `X = [0.1 * n for n in range(-30, 31)]`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Construire un tableau `Y` par compréhension, qui correspond à l'image de `X` par $f$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = [0.1 * n for n in range(-30, 31)]\n",
    "# ENTRER VOTRE CODE ICI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Executer la cellule ci-dessous. Le résultat obtenu est-il conforme à la demande ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "def tracer(t_x, t_y):\n",
    "    assert len(t_x) == len(t_y), \"Erreur: tableaux incohérents\"\n",
    "    plt.plot(t_x, t_y)\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "\n",
    "# Décommenter la ligne ci-dessous\n",
    "#tracer(X, Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Composantes d'un vecteur\n",
    "Ecrire une fonction `vecteur` qui prend en paramètres deux p-uplets qui correspondent aux coordonnées dans le plan de deux points A et B. La fonction `vecteur` retourne un n-uplet correspondant aux coordonnées du vecteur $\\vec{AB}$ dans le plan."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Votre code dans cette cellule\n",
    "def vecteur(xy_A, xy_B):\n",
    "    \"\"\"\n",
    "    Renvoie un p-uplet ayant deux composantes correspondant aux coordonnées d'un vecteur AB.\n",
    "    xy_A, xy_B: tuple à deux éléments, correspondant aux coordonnées (xA, yA) et (xB, yB) de\n",
    "    deux points A et B.\n",
    "    \"\"\"\n",
    "    #A compléter\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TEST - DECOMMENTER et EXECUTER\n",
    "#assert vecteur((5,1), (3,4)) == (-2, 3), \"La fonction ne passe pas le test\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Trouver le jour correspondant à une date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python possède un module permettant de gérer les dates. Il s'agit du module `datetime`. On y trouve, entre autres, une classe qui permet la création d'objet `date` à partir d'entiers naturels représentant l'année, le mois et le jour. On y trouve aussi une méthode `today()` dont on verra une utilisation plus loin.  \n",
    "\n",
    "Par exemple, pour créer un objet `date` correspondant au 31 décembre 2019, on procèdera de la manière suivante:  \n",
    "\n",
    "```python\n",
    "from datetime import date\n",
    "d = date(2019, 12, 31)\n",
    "```\n",
    "\n",
    "Les attributs year (*année*), month (*mois*) et day (*jour*) d'un objet date `d` peuvent être obtenus par `d.year`, `d.month` et `d.day`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Consulter la documentation relative aux objets de type `date` et notamment la méthode `today()` et `weekday()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date\n",
    "\n",
    "#help(date.weekday)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#help(date.today)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Décommenter et exécuter la cellule suivante qui utilise des objets `date`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date\n",
    "\n",
    "d1 = date(2019, 12, 31)\n",
    "d2 = date.today() # date d'aujourd'hui\n",
    "#print(d1.day, '/', d1.month, '/', d1.year)\n",
    "#print(\"Aujourd'hui, on est le \", end='')\n",
    "#print(d2.day, '/', d2.month, '/', d2.year)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.  A partir des exemples précédents, créer un objet `date_an` de type `date` et correspondant à votre date d'anniversaire. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Votre code ici\n",
    "#date_an = "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.  Coder une fonction `trouver_jour` qui prend en paramètre un objet de type date et qui renvoie un p-uplet à 4 composantes, qui sont dans l'ordre:  \n",
    "    * le jour, ici une chaine de caractères valant 'lundi', 'mardi', etc.\n",
    "    * le jour dans le mois, ici un entier valant 1, 2, .., 30 ou 31 selon le mois;\n",
    "    * le mois, une chaîne de caractère valant 'janvier', 'février', etc.\n",
    "    * l'année, un entier positif.\n",
    "    \n",
    "---\n",
    "\n",
    "*Aide*: utilisation de la méthode `weekday()` qui permet d'obtenir le jour correspondant à une date.  \n",
    "Exemple: le premier jour de l'an 2000 correspondait à :  \n",
    "\n",
    "```python\n",
    "from datetime import date\n",
    "d2000 = date(2000,1,1)\n",
    "print(d2000.weekday())\n",
    "5\n",
    "```\n",
    "\n",
    "D'après la documentation, si lundi correspond à 0 alors 5 correspond à un samedi\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Votre code ici\n",
    "def trouver_jour(d):\n",
    "    \"\"\"\n",
    "    Renvoie le jour sous la forme d'un p-uplet à 4 composantes: jour de la semaine (string), \n",
    "    jour dans le mois (int), mois (int) et année (int).\n",
    "    d: objet de type date\n",
    "    \"\"\"\n",
    "    \n",
    "    # Constantes de type p-uplet à utiliser\n",
    "    SEMAINE = ('lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche')\n",
    "    MOIS = ('janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet',\n",
    "           'août', 'septembre', 'octobre', 'novembre', 'décembre')\n",
    "    #A compléter\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TEST - DECOMMENTER et EXECUTER\n",
    "#assert trouver_jour(date(1989,1,29)) == (\"dimanche\", 29, \"janvier\", 1989), \"La fonction ne passe pas le test\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Trouver le jour de votre naissance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Votre code ici"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyse d'un tableau de notes\n",
    "On souhaite analyser les notes obtenues par un groupe de spécialité NSI. Ces résultats sont modélisés sous la forme d'un tableau de nombres flottants compris entre 0 et 20. Ecrire une fonction `analyse_note` qui prend comme paramètre un tableau de notes et qui renvoie un p-uplet composé de la médiane, la moyenne et l'écart type.  \n",
    "On utilisera des fonctions disponibles dans la librairie standard de python, plus précisemment dans le module `statistics`: `median`, `mean` et `variance`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.  Prendre connaissance de la documentation sur les fonctions `median`, `mean` et `variance` du module `statistics`.  \n",
    "2.  L'écart type est défini comme la racine carrée de la variance. La fonction racine carrée `sqrt` peut être importée depuis le module `math`. Compléter la fonction `analyse_note` dans la cellule déjà préparée ci-dessous, puis tester votre code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1. Afficher l'aide sur les fonctions median, mean et variance du module statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#2. Votre code dans cette cellule\n",
    "from statistics import median, mean, variance\n",
    "from math import sqrt\n",
    "\n",
    "def analyse_note(t):\n",
    "    \"\"\"\n",
    "    Renvoie un p-uplet composé de la médiane, la moyenne et l'écart type d'échantillon de notes.\n",
    "    t: tableau de nombres flottants compris entre 0.0 et 20.0\n",
    "    \"\"\"\n",
    "    #A compléter\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TEST - DECOMMENTER et EXECUTER\n",
    "from math import fabs\n",
    "\n",
    "\n",
    "#notes = [15, 10, 3, 9, 5, 13, 2]\n",
    "#epsilon = 1e-5\n",
    "#assert fabs(analyse_note(notes)[0] - 9.0) < epsilon, \"La fonction ne passe pas le test\"\n",
    "#assert fabs(analyse_note(notes)[1] - 8.14285) < epsilon, \"La fonction ne passe pas le test\"\n",
    "#assert fabs(analyse_note(notes)[2] - 4.98091) < epsilon, \"La fonction ne passe pas le test\" "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Itérer sur les éléments d'un dictionnaire\n",
    "Au zoo de Beauval, il y a 5 éléphants d'Asie, 17 écureuils d'Asie, 2 pandas d'Asie, etc. On modélise cet inventaire avec un dictionnaire, de la façon suivante:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "zoo_Beauval = {\n",
    "    \"éléphant\" : (\"Asie\", 5),\n",
    "    \"écureuil\" : (\"Asie\", 17),\n",
    "    \"panda\" : (\"Asie\", 2),\n",
    "    \"hippopotame\" : (\"Afrique\", 7),\n",
    "    \"girafe\" : (\"Afrique\", 4)}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "De la même façon on représente le zoo de La Flèche:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "outputs": [],
   "source": [
    "zoo_LaFleche = {\n",
    "    \"ours\" : (\"Europe\", 4),\n",
    "    \"tigre\" : (\"Asie\", 7),\n",
    "    \"hippopotame\" : (\"Afrique\", 3),\n",
    "    \"girafe\" : (\"Afrique\", 11)}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "On souhaite écrire une fonction `plus_grand_nombre` qui prend un zoo en paramètre et qui retourne le nom de l'animal le plus représenté dans ce zoo.  \n",
    "1.  Quel type d'itération doit-on utiliser dans cette fonction?\n",
    "   *  \n",
    "   ```python\n",
    "for cle in d:\n",
    "    ...\n",
    "```  \n",
    "   *  \n",
    "```python\n",
    "for val in d.values():\n",
    "    ...\n",
    "```\n",
    "   *  \n",
    "```python\n",
    "for cle,val in d.items():\n",
    "    ...\n",
    "```\n",
    "   * Aucune itération\n",
    "   \n",
    "2. Coder cette fonction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Votre code dans cette cellule\n",
    "def plus_grand_nombre(zoo):\n",
    "    \"\"\"\n",
    "    Retourne le nom de l'animal (string) le plus représenté dans le zoo passé en paramètre.\n",
    "    zoo: dictionnaire\n",
    "    \"\"\"\n",
    "    #A compléter\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TEST - DECOMMENTER et EXECUTER\n",
    "#assert plus_grand_nombre(zoo_LaFleche) == \"girafe\", \"La fonction ne passe pas le test\"\n",
    "#assert plus_grand_nombre(zoo_Beauval) == \"écureuil\", \"La fonction ne passe pas le test\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "3.  On souhaite écrire une fonction `nombre_total` qui prend en paramètres un zoo et un nom de continent. Cette fonction doit retourner le nombre total d'animaux originaires de ce continent. Quel type d'itération doit-on utiliser dans cette fonction?\n",
    "   *  \n",
    "   ```python\n",
    "for cle in d:\n",
    "    ...\n",
    "```  \n",
    "   *  \n",
    "```python\n",
    "for val in d.values():\n",
    "    ...\n",
    "```\n",
    "   *  \n",
    "```python\n",
    "for cle,val in d.items():\n",
    "    ...\n",
    "```\n",
    "   * Aucune itération  \n",
    "   \n",
    "4. Coder cette fonction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Votre code dans cette cellule\n",
    "def nombre_total(zoo, continent):\n",
    "    \"\"\"\n",
    "    Retourne le nombre total d'animaux (entier naturel) présents dans le zoo \n",
    "    et originaire du continent.\n",
    "    zoo: dictionnaire\n",
    "    continent: string\n",
    "    \"\"\"\n",
    "    #A compléter\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TEST - DECOMMENTER et EXECUTER\n",
    "#assert nombre_total(zoo_LaFleche, \"Afrique\") == 14, \"La fonction ne passe pas le test\"\n",
    "#assert nombre_total(zoo_Beauval, \"Asie\") == 24, \"La fonction ne passe pas le test\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "5.  On souhaite écrire une fonction `nombre` qui prend en paramètres un zoo et un nom d'animal. La fonction doit retourner le nombre de représentant de cet animal (entier naturel) dans le zoo. Quel type d'itération doit-on utiliser dans cette fonction?\n",
    "   *  \n",
    "   ```python\n",
    "for cle in d:\n",
    "    ...\n",
    "```  \n",
    "   *  \n",
    "```python\n",
    "for val in d.values():\n",
    "    ...\n",
    "```\n",
    "   *  \n",
    "```python\n",
    "for cle,val in d.items():\n",
    "    ...\n",
    "```\n",
    "   * Aucune itération\n",
    "\n",
    "6. Coder cette fonction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Votre code dans cette cellule\n",
    "def nombre(zoo, animal):\n",
    "    \"\"\"\n",
    "    Retourne le nombre total d'animaux (entier naturel) présents dans le zoo \n",
    "    et originaire du continent.\n",
    "    zoo: dictionnaire\n",
    "    continent: string\n",
    "    \"\"\"\n",
    "    #A compléter\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TEST - DECOMMENTER et EXECUTER\n",
    "#assert nombre_total(zoo_LaFleche, \"Afrique\") == 14, \"La fonction ne passe pas le test\"\n",
    "#assert nombre_total(zoo_Beauval, \"Asie\") == 24, \"La fonction ne passe pas le test\""
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Format de la Cellule Texte Brut",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "metadata": {
   "deletable": false,
   "editable": false,
   "trusted": true
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "369.594px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
