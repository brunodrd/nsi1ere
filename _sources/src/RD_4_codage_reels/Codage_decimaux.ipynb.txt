{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "hideOutput": false
   },
   "source": [
    "CODAGE DES NOMBRES DECIMAUX\n",
    "==============================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conversion décimal - binaire d'un nombre en virgule fixe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pour passer du binaire au décimal, la méthode consiste à considérer deux parties:  \n",
    "\n",
    "* la première, composéee de puissances positives et qui correspond à la partie entière;\n",
    "* la seconde, composée de puissances négatives et qui correspond à la la partie fractionnaire.\n",
    "\n",
    "Ces deux parties étant séparées par la virgule *qui est fixe dans ce cas*. La conversion binaire $\\rightarrow$ décimale est alors évidente."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| $2^2$ \t| $2^1$ \t| $2^0$ \t| $2^{-1}$ \t| $2^{-2}$ \t| $2^{-3}$ \t| $2^{-4}$ \t|\n",
    "|-------\t|-------\t|-------\t|----------\t|----------\t|----------\t|----------\t|\n",
    "|1      \t|0      \t|  1     \t|  1       \t|  1       \t|  0       \t|  1       \t|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pour passer du décimal au binaire, l'algorithme est le suivant:  \n",
    "\n",
    "```\n",
    "--------------------------\n",
    "Algorithme décimal-binaire  \n",
    "--------------------------\n",
    "Convertir la partie entière (voir cours précédents)\n",
    "Convertir la partie fractionnaire en exécutant les étapes suivantes:\n",
    "    *  multiplier la partie fractionnaire par deux;\n",
    "    *  extraire la partie entière qui donne un des bits de la partie fractionnaire;\n",
    "    *  répéter les deux dernières étapes tant que la partie fractionnaire restante \n",
    "       est différente de zéro.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Des exemples**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Conversion binaire* $\\longrightarrow$ *décimal* de 1010,001  \n",
    "*Conversion décimal* $\\longrightarrow$ *binaire* de 6,6875  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conversion d'un nombre décimal en binaire - virgule flottante  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il s'agit de découvrir ici la façon dont on représente **de manière approximative** les nombres décimaux en machine: **les nombres flottants**. On l'appelle encore **représentation en virgule flottante**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Le format"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cette deuxième façon d'encoder un nombre décimal est inspirée de la notation scientifique: $\\pm m\\times 10^n$ mais en base deux. En base 2, on va écrire les nombres sous la forme $\\pm m\\times 2^n$ avec $1\\leq m \\lt 2$ et $n$ un entier.  \n",
    "Le codage d'un nombre décimal en base 2 nécessite:  \n",
    "\n",
    "*  une partie pour le signe $s$;\n",
    "*  une partie pour l'exposant, qu'on notera $n$;\n",
    "*  une partie pour $m$ qui appelé encore **mantisse**. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| partie 1  \t| partie 2     \t| partie 3     \t|\n",
    "|-----------\t|--------------\t|--------------\t|\n",
    "| signe $s$ \t| exposant $n$ \t| mantisse $m$ \t|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Représentation en simple ou double précision"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le format précédent a été précisé dans une norme appelée [IEEE754](https://fr.wikipedia.org/wiki/IEEE_754). Plusieurs niveaux de précisions sont définis dans cette norme. On ne s'intéressera ici qu'à la représentation en **simple précision sur 32 bits** et **double précision sur 64 bits**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Le signe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Un seul bit est nécessaire pour coder le signe $s$. On garde la convention déjà rencontrée: 0 pour le signe `+` et 1 pour le signe `-` ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### L'exposant"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La norme prévoit **8 bits en simple précision** et **11 bits en double précision** pour l'exposant. Les valeurs de $n$ possibles seraient donc comprises entre 0 et 255 ou 0 et 2047. C'est un problème car cela nous empêche de travailler avec des nombres très petits!  \n",
    "Pour y remédier, on a eu recours à l'astuce suivante: l'exposant est *biaisé* ou *décalé* de 127 en simple précision et 1023 en double précision.  \n",
    "\n",
    "En d'autres termes, si on appelle $e$ la valeur codée de l'exposant, alors:  \n",
    "\n",
    "* $n=e-127$ en simple précision;\n",
    "* $n=e-1023$ en double précision."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### La mantisse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Avec le format décrit, $1\\leq m \\lt 2$, on aura toujours $m=1,\\dots$. La mantisse commence toujours par $1$ (*sauf cas particuliers qui ne seront pas traités ici*). De ce fait, on ne code jamais le 1 et **les 23 ou 52 bits restants sont utilisés pour coder la partie fractionnaire** $f$ **de la mantisse**.  \n",
    "*Remarque*: $m=1+f$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Résumé"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| précision \t| exposant $e$ \t|partie frac. $f$       \t| expression de la valeur en décimal                    \t|\n",
    "|-----------\t|--------------\t|--------------\t|-------------------------------------\t|\n",
    "| 32 bits   \t| 8 bits       \t| 23 bits      \t| $(-1)^s\\times (1+f)\\times 2^{e-127}$  \t|\n",
    "| 64 bits   \t| 11 bits      \t| 52 bits      \t| $(-1)^s\\times (1+f)\\times 2^{e-1023}$ \t|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exemple de conversion décimal - flottant"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Soit à convertir $N=17,25$ en flottant, format simple précision. Il s'agit de touver les trois composantes $s,e \\mbox{ et}f$ de la représentation en virgule flottante.  \n",
    "\n",
    "**Recherche de la mantisse et de l'exposant**  \n",
    "En virgule fixe on a $N=10001,01$. Après décalage de la virgule de 4 rangs vers la gauche (cela revient à multiplier par $2^4$), on obtient:  \n",
    "\n",
    "$$ N=1,000101 \\times 2^4$$\n",
    "\n",
    "On a fait apparaître la partie fractionnaire $f=000101$ soit, sur 23 bits, $f=00010100\\ 00000000\\ 0000000$.  \n",
    "De plus, la puissance de 2 fourni:  \n",
    "\n",
    "$$ n=e - 127 = 4 \\iff e=131=10000011_2$$\n",
    "\n",
    "**Ecriture selon la norme IEEE754 simple précision**  \n",
    "\n",
    "$$N= 0\\ 10000011\\ 00010100 00000000 0000000$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exemple de conversion flottant - décimal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Soit à convertir:\n",
    "$$1\\ 10000110\\ 10101101100000000000000$$\n",
    "Signe: $s=(-1)^1=-1$;  \n",
    "\n",
    "Exposant: $n=e-127$, or on peut lire $e=10000110_2 = 134_{10}$; on a donc $n=134-127=7$.  \n",
    "\n",
    "Mantisse: $m=1+f$ avec $f=2^{-1}+2^{-3}+2^{-5}+2^{-6}+2^{-8}+2^{-9}$, soit $m=1,677734375$.  \n",
    "\n",
    "Finalement, ce nombre vaut en décimal:\n",
    "$$-1,677734375\\times 2^7=-214,75$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cas particuliers\n",
    "Lorsque tous les bits sont à zéros, cela correspond à la valeur zéro. Lorsque tous les bits de l'exposant sont à 1 et que la partie fractionnaire est nulle, cela correspond à l'infini (plus ou moins, cela dépend du bit de signe).\n",
    "Enfin, pour les nombres très petits (inférieurs à $2^{-126}$) il existe une forme dénormalisée, qui ne sera pas étudiée ici."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Caractère approchée de la représentation\n",
    "Donner les représentations binaire de 0.2 et 0.3  \n",
    "Un ordinateur qui ne peut stocker qu'un nombre fini de chiffre, ne peut représenter correctement ces nombres et utilise par conséquent une valeur approchée. Par exemple:  \n",
    "\n",
    "*  1.2* 3 donne 3.5999999999999996;\n",
    "*  0.1 + 0.2 == 0.3 donne False  \n",
    "\n",
    "Par ailleurs, des propriétés comme l'associativité de l'addition ne sont plus valables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.5"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1.6 +(3.2 + 1.7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.500000000000001"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1.6 + 3.2) + 1.7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A retenir\n",
    "Les nombres flottants sont une représentation approximatives des nombres réels dans les ordinateurs. Une norme internationale IEEE754 définit un encodage en simple ou double précision (32 ou 64 bits). Les opérations arithmétiques sur les nombres flottants n'ont pas toujours les mêmes propriétés que ces mêmes opérations sur les nombres réels."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![licence](img/licence.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br />Cette création est mise à disposition sous un <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/2.0/fr/\">contrat Creative Commons</a>."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
