{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "REPRESENTATION DE TEXTE\n",
    "========================"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Activité de découverte"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DECOMMENTER LES LIGNES CI-DESSOUS ET EXECUTER\n",
    "#from IPython.display import IFrame\n",
    "#\n",
    "#\n",
    "#IFrame('activité.pdf', width=800, height=450)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## L'objectif\n",
    "Il s'agit d'**associer un caractère à un numéro unique**: c'est ce que l'on appelle un **encodage**. Pour être efficace un encodage doit représenter le plus de caractères possible et être compact."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## L'ASCII\n",
    "A l'origine plusieurs encodages incompatibles entre eux coexistaient jusqu'à ce qu'une norme s'impose dans les années 60: l'**A**merican **S**tandard **C**ode for **I**nformation **I**nterchange (ASCII).  \n",
    "Un octet est utilisé pour coder un caractère. En réalité, seuls 7 bits sont utilisés: on peut donc coder $2^7=128$ caractères avec cette norme. Le dernier bit était utilisé à des fins de contrôle lors des transmissions.  \n",
    "Il faut noter que seuls les caractères \"anglo-saxons\" sont présents. Les caractères accentués ne sont pas représentables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evolution: la norme ISO 8859\n",
    "Afin d'intégrer plus de caractères (*notamment les caractères accentués*), une première évolution a eu lieu: la norme ISO 8859.  \n",
    "Il s'agit d'une extension de l'ASCII: on utilise le 8ème bit (utilisé jusque là pour le contrôle de parité) pour coder des caractères. On a ainsi $2^8=256$ possibilités !\n",
    "Une table de correspondance code hexadécimal ou $\\textrm{décimal}\\longleftrightarrow\\textrm{ASCII}$ et ASCII étendu peut être trouvée à cette [adresse](http://www.asciitable.com/)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Norme ISO 10646 - Standard Unicode\n",
    "Bien qu'intéressante l'évolution vers la norme ISO 8859 ne règle pas tous les problèmes et notamment des langues autres qu'européennes (*asiatiques entre autres*).  \n",
    "Pour tenir compte de tous les caractères utilisés, l'ISO proposa une nouvelle norme. Il s'agit alors de définir un caractère comme une *entité* possédant:  \n",
    "\n",
    "*  un nom;  \n",
    "*  un numéro, appelé encore **point de code** et noté U+xxxx où xxxx est un nombre hexadécimal.  \n",
    "\n",
    "[Voir la page wikipedia](https://fr.wikipedia.org/wiki/Table_des_caract%C3%A8res_Unicode_\\(0000-0FFF\\))  \n",
    "\n",
    "Un consortium privé à but non lucratif, Unicode, proposa alors plusieurs techniques pour encoder ces points de code. La plus utilisée est manifestement l'encodage **UTF-8** (Universal Transformation Format); le \"8\" signifie qu'il faut au minimum 8 bits pour représenter le caractère associé à un point de code.  \n",
    "Les encodages UTF-16 (complexe) et UTF-32 (peu économe) ne seront pas abordés ici."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Principe de l'encodage UTF-8\n",
    "Cet encodage permet de coder un caractère sur 1, 2, 3 ou 4 octets. Si le point de code est inférieur ou égal à 127 (7F en hexadécimal)le caractère est codé sous la forme $0xxx xxxx$ comme en ASCII.  \n",
    "Sinon, on utilise la forme binaire du point de code et on détermine ainsi le nombre de bits nécessaire au codage du caractère."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Point de code    \t| Octets (binaire)                        \t| Nb de bits <br>utiles \t|\n",
    "|------------------\t|-----------------------------------------\t|-----------------------\t|\n",
    "| U+0000-U+007F    \t| 0xxx xxxx                               \t| 7                     \t|\n",
    "| U+0080-U+07FF    \t| 110x xxxx 10xx xxxx                     \t| 11                    \t|\n",
    "| U+0800-U+FFFF    \t| 1110 xxxx 10xx xxxx 10xx xxxx           \t| 16                    \t|\n",
    "| U+10000-U+10FFFF \t| 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx \t| 21                    \t|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "L'octet de poids fort est composé d'une séquence de 1 terminé par un 0. Le nombre de 1 présent dans cette séquence indique le nombre d'octet utilisé pour coder le caractère.  \n",
    "\n",
    "**Exemple**  \n",
    "Soit à coder le symbole de l'ensemble vide $\\varnothing$ qui a pour point de code 8709 ou U+2205.  \n",
    "Le point de code exprimé en binaire est: 10001000000101. Il faut 14 bits pour coder ce nombre. D'après le tableau ci-dessus, on va utiliser un codage sur 3 octets:  \n",
    "\n",
    "$$\n",
    "\\mathbf{1110}\\ 0010\\ \\mathbf{10}00\\ 1000\\ \\mathbf{10}00\\ 0101\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Unicode et python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Les chaines de caractères en python utilisent l'encodage UTF-8. D'ailleurs, on peut saisir directement une chaine à partir de ses points de code (*si on les connait*), en prenant la précaution de les préfixer de '\\u'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E ≠ ∅\n"
     ]
    }
   ],
   "source": [
    "ch = '\\u0045\\u0020\\u2260\\u0020\\u2205'\n",
    "print(ch)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il est possible en python de connaître le résultat de l'encodage (en hexadécimal), en utilisant la méthode encode."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'E \\xe2\\x89\\xa0 \\xe2\\x88\\x85'\n"
     ]
    }
   ],
   "source": [
    "chaine_octets = ch.encode('utf8')\n",
    "print(chaine_octets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remarques  \n",
    "On voit apparaître un nouveau type disponible en python: le type bytes (octet);\n",
    "La chaine d'octets et la chaine de caractères n'ont pas même longueur: en UTF-8, un caractère peut être codé sur plusieurs octets.  \n",
    "\n",
    "On peut également faire le conversion inverse (d'une chaine d'octets vers une chaine caractères) avec la méthode decode."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'n ∈ ℕ'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = b'n \\xe2\\x88\\x88 \\xe2\\x84\\x95'\n",
    "a.decode('utf8')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Références**  \n",
    "\n",
    "Spécialité NSI 1re - Balabonski et al. - ellipses  \n",
    "[lien vers la description](https://www.editions-ellipses.fr/accueil/118-10382-specialite-numerique-et-sciences-informatiques-30-lecons-avec-exercices-corriges-premiere-nouveaux-programmes-9782340033641.html#/1-format_disponible-broche)\n",
    "\n",
    "***\n",
    "![licence](img/licence.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
