{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Représentation de l'information - Exercices\n",
    "==================================="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Manipulations binaires en python\n",
    "### Préambule: types natifs\n",
    "Python possède trois types numériques natifs, parmi lesquels on peux citer les entiers **relatifs** (*integers*) et les nombres décimaux à virgule flottante (*float*). Pour manipuler du texte, on dispose du type chaine de caractères (*string*). Ces dernières sont déclarées en étant entourées de double quotes \" \" ou de simples quotes ' '. Par exemple \n",
    "\n",
    "```python\n",
    "mavariable = \"programmation\"```\n",
    "Pour accéder au type d'un objet `obj`on utilise la fonction native `type()` sur cet objet:  \n",
    "```python\n",
    "type(obj)\n",
    "```\n",
    "\n",
    "Donner le type des objets suivants: 11, 11.0 et \"11\". Représentent-ils le même objet ?\n",
    "\n",
    "### Convertisseur decimal binaire version 1\n",
    "Python possède une fonction native qui permet la conversion d'un entier en binaire: la fonction `bin()`.  \n",
    "\n",
    "1. Consulter la documentation associée à cette fonction.\n",
    "2. Convertir l'entier 77 en binaire et l'affecter à une variable nommée `valeurbinaire`. \n",
    "3. Quel est le type de `valeurbinaire` ?\n",
    "4. On souhaiterait afficher `valeurbinaire` sans le préfixe `0b`. La fonction (on dit ici *méthode* associée aux chaines de caractères) qui pourrait être utilisée est `str.lstrip()`. Exemple d'utilisation:  \n",
    "\n",
    "```python\n",
    "com = \"# Ceci n'est pas un commentaire valide en python\"\n",
    "print(com.lstrip(\"# \"))\n",
    "Ceci n'est pas un commentaire valide en python\n",
    "```  \n",
    "\n",
    " * Consulter la documentation associée à `str.strip`.\n",
    " * Afficher `valeurbinaire` sans le préfixe `0b`.\n",
    " \n",
    "### Convertisseur decimal binaire version 2\n",
    "Dans cette partie on va implémenter en python l'algorithme évoqué au paragraphe \"Conversion décimal - binaire\". L'algorithme est écrit en pseudo-code, dans lequel l'affectation est notée $\\leftarrow$ et la chaine de caractères vide \"\".\n",
    "![Algorithme conversion binaire](img/cnvbinaire.png)\n",
    "1. Ecrire une fonction en python `dec2bin(n)` qui retourne la conversion en binaire d'un entier $n$.   \n",
    "*Indications*:  \n",
    "\n",
    "  *  en python le reste de la division de $a$ par $b$ est obtenu par `a % b`; \n",
    "  *  la division entière de $a$ par $b$ s'obtient par `a // b`;\n",
    "  *  pour convertir un nombre $x$ en caractère $\"x\"$ on utilise `str(x)`.  \n",
    "  \n",
    "2. Justifier simplement que la boucle tant que termine.\n",
    "3. *Pour les plus rapides*: retourner le résultat sur 16 bits en complétant le cas échéant avec des zéros. Indication: se documenter sur la fonction `str.zfill()`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Manipulations hexdécimales en python\n",
    "### Préambule\n",
    "Python possède une fonction native permettant de convertir un entier en hexadécimal: `hex()`.  \n",
    "\n",
    "1. Consulter la documentation de `hex`.\n",
    "2. Convertir $N_1=352_{10}$ en hexadécimal.\n",
    "3. Afficher la valeur sans le préfixe '0x'. *Conseil: voir exercice précédent*\n",
    "\n",
    "### Traitement d'une chaine hexadécimale\n",
    "Une fonction dont le code est donnée ci-dessous est proposée. Malheureusement, une partie de sa spécification n'a pas été complétée.  \n",
    "\n",
    "1. Que réalise cette fonction ? Faire des tests avec les nombres \"10FA1000\" et \"84BD1001\".\n",
    "2. Afficher la conversion en entier de ces nombres préalablement transformés par la fonction `big2little()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def big2little(nh):\n",
    "    \"\"\"\n",
    "    \n",
    "    \"\"\"\n",
    "    resultat = \"\"\n",
    "    l = len(nh)\n",
    "    for i in range(0,l-1,2):\n",
    "        resultat = nh[i:i+2] + resultat\n",
    "    return resultat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Application: entête d'un fichier image\n",
    "Les fichiers images au format [BMP](https://fr.wikipedia.org/wiki/Windows_bitmap) sont bien documentés. On peut aisemment consulter les informations avec un éditeur hexadecimal. Les 2 premiers octets servent à identifier le fichier et les 4 suivants nous donnent la taille du fichier (*en hexadécimal!*).  \n",
    "En python l'ouverture d'un fichier se fait avec la fonction native `open()` et obeit à la construction suivante:  \n",
    "\n",
    "```python\n",
    "f = open('nom_fichier','rb')#l'option 'rb' signifie read (mode lecture) binary (mode binaire)\n",
    "#traitement(s)\n",
    "#\n",
    "f.close()#important !!\n",
    "```\n",
    "\n",
    "La séquence `f = open()` retourne un objet \"fichier\" qui dispose de nombreuses *méthodes*, parmi lesquelles on peut citer `read(n)` qui permet de lire $n$ octets.  \n",
    "\n",
    "1.  Ouvrir le fichier \"alien.bmp\" en lecture binaire.\n",
    "2.  Lire et afficher le type de fichier (lire les 2 premiers octets)\n",
    "3.  Lire les 4 octets suivants et les stocker dans une variable `taille_big`.\n",
    "4.  Stocker dans une variable `taille` la taille du fichier BMP. Il suffit de passer `taille_big` à la fonction `big2little()`.\n",
    "5.  Convertir cette taille en entier (fonction `int()`). Cette valeur est-elle cohérente avec celle fournie par le système d'exploitation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
